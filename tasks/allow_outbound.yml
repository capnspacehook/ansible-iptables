---

- name: Set {{ item.name }} variables
  set_fact:
    current_root_chain: "{{ item.name | upper }}_OUT"
    current_output_accept_log_chain: "{{ item.name | upper }}_OUT_ACCEPT_LOG"
    current_output_drop_log_chain: "{{ item.name | upper }}_OUT_DROP_LOG"
    current_filters: []
    current_input_iface: ""
    current_output_iface: ""

- name: Set {{ item.name }} interfaces
  set_fact:
    current_input_iface: "-i {{ item.interface }}"
    current_output_iface: "-o {{ item.interface }}"
  when: item.interface | length > 0

- name: Firewall rule - allow {{ item.name }} outbound
  iptables_raw:
    name: "allow-{{ item.name }}-outbound"
    state: "{{ item.state }}"
    weight: "{{ item.weight | int - 1 }}"
    rules: |
      -N {{ current_root_chain }}
      -A OUTPUT {{ current_output_iface }} -p {{ item.proto }} -m multiport --dports {{ item.ports }} -j {{ current_root_chain }}
      -A INPUT {{ current_input_iface }} -p {{ item.proto }} -m multiport --sports {{ item.ports }} -m state --state ESTABLISHED,RELATED -j {{ item.inbound_est_action }}
  notify: Persist rules

- name: Create {{ item.name }} logging chains
  include_tasks: log_chain.yml
  loop:
    - name: "{{ item.name }}-outbound-accept-chain"
      rule_name: "logging-{{ item.name }}-outbound-accept-chain"
      state: "{{ ((item.state == 'present') and (item.filters | length == 0)) | ternary('present', 'absent') }}"
      chain_name: "{{ current_output_accept_log_chain }}"
      prefix: "{{ item.name | upper }}:OUTPUT:ACCEPT:"
      action: "{{ item.action }}"
    - name: "{{ item.name }}-outbound-drop-chain"
      rule_name: "logging-{{ item.name }}-outbound-drop-chain"
      state: "{{ ((item.state == 'present') and (item.filters | length > 0)) | ternary('present', 'absent') }}"
      chain_name: "{{ current_output_drop_log_chain }}"
      prefix: "{{ item.name | upper }}:OUTPUT:DROP:"
      action: DROP
  loop_control:
    loop_var: log_rule

- name: Initialize list {{ item.name }} outbound filters
  set_fact:
    current_filters: >
      {{ current_filters|default([]) + [{
        'name': filter.name,
        'state': item.state,
        'weight': item.weight,
        'proto': item.proto,
        'root_chain': current_root_chain,
        'users': filter.users | default([]),
        'allowed': filter.allowed | default([]),
        'blocked': filter.blocked | default([]),
        'action': filter.action | default('ACCEPT'),
        'est_action': filter.est_action | default(item.outbound_est_action),
      }] }}
  loop: "{{ item.filters }}"
  loop_control:
    loop_var: filter

- name: Create {{ item.name }} filters
  include_tasks: outbound_filters.yml
  loop: "{{ current_filters }}"
  loop_control:
    loop_var: filter

- name: Firewall rule - allow established {{ item.name }} outbound
  iptables_raw:
    name: "allow-established-{{ item.name }}-outbound"
    state: "{{ item.state }}"
    weight: "{{ item.weight | int + 1 }}"
    rules: |
      -A {{ current_root_chain }} -m state --state ESTABLISHED,RELATED -j {{ item.outbound_est_action }}
  notify: Persist rules

- name: Firewall rule - block unmatched {{ item.name }} outbound traffic if IP filtering is enabled
  iptables_raw:
    name: "block-unmatched-outbound-{{ item.name }}"
    state: "{{ ((item.state == 'present') and (item.filters | length > 0)) | ternary('present', 'absent') }}"
    weight: "{{ item.weight | int + 2 }}"
    rules: |
      -A {{ current_root_chain }} -j {{ current_output_drop_log_chain }}
  notify: Persist rules

- name: Firewall rule - log new {{ item.name }} outbound traffic if IP filtering is disabled
  iptables_raw:
    name: "log-{{ item.name }}-outbound-accepted"
    state: "{{ ((item.state == 'present') and (item.filters | length == 0)) | ternary('present', 'absent') }}"
    weight: "{{ item.weight | int + 2 }}"
    rules: |
      -A {{ current_root_chain }} -j {{ current_output_accept_log_chain }}
  notify: Persist rules

- name: Firewall rule - filter {{ item.name }} outbound loopback traffic
  iptables_raw:
    name: "filter-{{ item.name }}-outbound-loopback"
    state: "{{ ((item.state == 'present') and (item.filter_loopback | bool)) | ternary('present', 'absent') }}"
    weight: 4
    rules: |
      -A OUTPUT -o lo -p {{ item.proto }} -m multiport --dports {{ item.ports }} -j {{ current_root_chain }}
      -A INPUT -i lo -p {{ item.proto }} -m multiport --sports {{ item.ports }} -m state --state ESTABLISHED,RELATED -j {{ item.inbound_est_action }}
  notify: Persist rules