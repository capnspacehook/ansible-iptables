---

- name: Create ipset for banned hosts
  command: "ipset create {{ ipset_banned }} hash:ip family inet timeout {{ iptables_ban_duration }}"
  register: ipset_out
  changed_when: "'set with the same name already exists' not in ipset_out.stderr"
  failed_when: "ipset_out.rc != 0 and 'set with the same name already exists' not in ipset_out.stderr"
  when: iptables_ban_hosts | bool

- name: Destroy ipset for banned hosts
  command: "ipset destroy {{ ipset_banned }}"
  register: ipset_out
  changed_when: "'set with the given name does not exist' not in ipset_out.stderr"
  failed_when: "ipset_out.rc != 0 and 'set with the given name does not exist' not in ipset_out.stderr"
  when: not iptables_ban_hosts

- name: Firewall rule - ban hosts that do not match rules
  iptables_raw:
    name: ban-chain
    state: "{{ (iptables_ban_hosts | bool) | ternary('present', 'absent') }}"
    weight: 0
    rules: |
      -A {{ ban_chain }} -m hashlimit --hashlimit-above {{ iptables_ban_interval }} --hashlimit-burst {{ iptables_ban_burst }} --hashlimit-htable-expire {{ iptables_ban_expire }} --hashlimit-mode srcip --hashlimit-name {{ iptables_suspicious_hashtable }} -j SET --add-set {{ ipset_banned }} src
      -A {{ ban_chain }} -j DROP
  notify: Persist rules

- name: Create chain to ban and log
  include_tasks: log_chain.yml
  loop:
    - name: log-banned-chain
      rule_name: logging-banned-chain
      state: "{{ (iptables_ban_hosts | bool) | ternary('present', 'absent') }}"
      chain_name: "{{ log_banned_chain }}"
      prefix: "BANNED:INPUT:DROP:"
      action: DROP
  loop_control:
    loop_var: log_rule

- name: Firewall rule - drop banned traffic
  iptables_raw:
    name: drop-banned
    state: "{{ (iptables_ban_hosts | bool) | ternary('present', 'absent') }}"
    weight: 16
    rules: |
      -A INPUT -m set --match-set {{ ipset_banned }} src -j {{ log_banned_chain }}
  notify: Persist rules